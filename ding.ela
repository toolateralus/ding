#import core;

#compiler_flags "-Oz -flto -s"

get_number :: (n: int) -> string[] {
  switch n {
    0: {
      return {"  ___   ", 
              " / _ \\  ", 
              "| | | | ", 
              "| | | | ", 
              "| |_| | ", 
              " \\___/  "};    
    }
    1: {
      return {"  __    ", 
              " /_ |   ", 
              "  | |   ", 
              "  | |   ", 
              "  | |   ", 
              "  |_|   "};
    }
    2: {
      return {"  ___   ", 
              " |__ \\  ", 
              "    ) | ", 
              "   / /  ", 
              "  / /_  ", 
              " |____| "};
    }
    3: {
      return {"  ____  ", 
              " |___ \\ ", 
              "   __) |", 
              "  |__ < ", 
              "  ___) |", 
              " |____/ "};
    }
    4: {
      return {"  _  _  ", 
              " | || | ", 
              " | || |_ ", 
              " |__   _|", 
              "    | | ", 
              "    |_| "};
    }
    5: {
      return {"  _____ ", 
              " | ____|", 
              " | |__  ", 
              " |___ \\ ", 
              "  ___) |", 
              " |____/ "};
    }
    6: {
      return {"   __   ", 
              "  / /   ", 
              " / /_   ", 
              "| '_ \\  ", 
              "| (_) | ", 
              " \\___/  "};
    }
    7: {
      return {"  ______", 
              " |____  |", 
              "     / /", 
              "    / / ", 
              "   / /  ", 
              "  /_/   "};
    }
    8: {
      return {"  ___   ", 
              " / _ \\  ", 
              "| (_) | ", 
              " > _ <  ", 
              "| (_) | ", 
              " \\___/  "};
    }
    9: {
      return {"  ___   ", 
              " / _ \\  ", 
              "| (_) | ", 
              " \\__, | ", 
              "   / /  ", 
              "  /_/   "};
    }
  }
  return {"INVALID"};
}

print_ascii :: (remaining: s64) {
  minutes : s64 = remaining / 60;
  seconds : s64 = remaining % 60;

  seconds_str : string;
  minutes_str : string;
  if seconds < 10 {
    seconds_str = $"0{seconds}";
  } else {
    seconds_str = to_string(seconds);
  }

  if minutes < 10 {
    minutes_str = $"0{minutes}";
  } else {
    minutes_str = to_string(minutes);
  }

  time_str := $"{minutes_str}:{seconds_str}";

  lines : string[] = string[]{"", "", "", "", "", ""};

  for i in 0..time_str.length {

    ch : char = time_str[i];

    ascii_lines: string[];

    if ch == #char ":" {
      ascii_lines = string[]{" _ ", "(_)", "   ", " _ ", "(_)", "   "};
    } else {
      s : char[2] = {ch, #char "\0"};
      ascii_lines = get_number(atoi((char*)s));
    }

    for j in 0..6 {
      lines[j] = $"{lines[j]}{ascii_lines[j]} ";
    }
  }

  for line; lines {
    println(line);
  }
}



main :: (argc: int, argv: char**) -> int {
  if argc == 1 {
    println("too few arguments. expected `ding <duration>`");
    return 1;
  }

  duration : float64 = atof(argv[1]) * 60.0;

  if duration == 0 {
    println("duration recieved was 0.");
    return 1;
  }

  start := time(null);
  
  while true {
    system("clear");
    elapsed: float64 = time(null) - start;
    remaining := duration - elapsed;
    if (elapsed >= duration) then break;
    print_ascii((s64)remaining);
    sleep(1);
  }

  return 0;
}
