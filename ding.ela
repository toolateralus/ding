import fmt::*;

// #c_flags "-Oz -flto -s"

fn get_number(n: s32) -> *const str {
  #static strings : str[6][9] = 
  .[
    str.[
      "  ___   ",
      " / _ \\  ",
      "| | | | ",
      "| | | | ",
      "| |_| | ",
      " \\___/  "
    ],
    str.[
      "  __    ",
      " /_ |   ",
      "  | |   ",
      "  | |   ",
      "  | |   ",
      "  |_|   "
    ],
    str.[
      "  ___   ",
      " |__ \\  ",
      "    ) | ",
      "   / /  ",
      "  / /_  ",
      " |____| "
    ]
    str.[
      "  ____  ",
      " |___ \\ ",
      "   __) |",
      "  |__ < ",
      "  ___) |",
      " |____/ "
    
    ],
    str.[
      "  _  _   ",
      " | || |  ",
      " | || |_ ",
      " |__   _|",
      "    | |  ",
      "    |_|  "
    
    ],
    str.[
      "  _____ ",
      " | ____|",
      " | |__  ",
      " |___ \\ ",
      "  ___) |",
      " |____/ "
    
    ],
    str.[
      "   __   ",
      "  / /   ",
      " / /_   ",
      "| '_ \\  ",
      "| (_) | ",
      " \\___/  "
    
    ],
    str.[
      "  ______",
      " |____  |",
      "     / /",
      "    / / ",
      "   / /  ",
      "  /_/   "
    
    ],
    str.[
      "  ___   ",
      " / _ \\  ",
      "| (_) | ",
      " > _ <  ",
      "| (_) | ",
      " \\___/  "
    
    ],
    str.[
      "  ___   ",
      " / _ \\  ",
      "| (_) | ",
      " \\__, | ",
      "   / /  ",
      "  /_/   "
    ],
  ];
  
  return strings[n] as *const str;
}

fn print_ascii(remaining: s64) {
  mut minutes : s64 = remaining / 60;
  mut seconds : s64 = remaining % 60;

  mut seconds_str : String;
  mut minutes_str : String;

  if seconds < 10 {
    seconds_str = format("0%", (seconds,), FormatOptions::default());
  } else {
    seconds_str = format("%", (seconds,), FormatOptions::default());
  }

  if minutes < 10 {
    minutes_str = format("0%", (minutes,), FormatOptions::default());
  } else {
    minutes_str = format("%", (minutes,), FormatOptions::default());
  }

  mut time_str := format("%:%", (minutes_str, seconds_str), FormatOptions::default());

  mut lines: String[];
  lines.initialize(6);

  defer {
    lines.deinit();
  }

  defer {
    seconds_str.deinit();
    minutes_str.deinit();
    time_str.deinit();
    lines.deinit();
  }

  colon_lines : str[6] = str.[" _ ", "(_)", "   ", " _ ", "(_)", "   "];

  for i in 0..time_str.length {
    ch : u8 = time_str[i];

    mut ascii_lines: *const str = colon_lines;

    if ch != ':' {
      s : u8[2] = .[ch, '\0'];
      ascii_lines = get_number(atoi(s));
    } 

    for j in 0..6 {
      lines[j] = format("%%", (lines[j], ascii_lines[j]), FormatOptions::default());
    }
  }

  for line in lines {
    println(line);
    line.deinit();
  }
}

#foreign fn time(value: *const void) -> s32;

fn main() {
  args := Env::args();
  if args.length == 1 {
    panic("too few arguments. expected `ding <n_minutes:float>`");
  }

  duration : f64 = atof(args[1].data) * 60.0;

  if duration == 0 {
    panic("duration recieved was 0.");
  }

  start := time(null);

  while true {
    system("clear"c);
    elapsed: f64 = time(null) - start;
    remaining := duration - elapsed;
    if (elapsed >= duration) then break;
    print_ascii(remaining as s64);
    sleep(1);
  }

  exit(0);
}
